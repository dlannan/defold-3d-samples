function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_camera_projection")
	msg.post("camera", "acquire_camera_focus")

	-- rotate the cube
	go.animate("/objs", "euler.z", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_INOUTQUAD, 6)
	go.animate("/objs", "euler.x", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_INOUTQUAD, 9)
	go.animate("/objs", "euler.y", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_INOUTQUAD, 12)

	-- tint the cube and the sphere
	model.set_constant("/objs#cube", "tint", vmath.vector4(1,1,0,1))
	
	-- position directional light
	self.light = vmath.vector4(0, 0, go.get_position().z + 1, 0)

	model.set_constant("/sky#sphere", "sunposition", self.light)
	model.set_constant("/sky#sphere", "vparams", vmath.vector4(1.0, 2.0, 0.005, 0.0))

	model.set_constant("/objs#cube", "light", self.light)
	model.set_constant("/objs#quad", "light", self.light)

	
end

function update(self)

	model.set_constant("/sky#sphere", "fparams", vmath.vector4(os.clock(), 0.5, 300.0, 1.0))
end

function on_input(self, action_id, action)
	-- move directional light based on input
	self.light.x = 2 * ((action.x - 480) / 480)
	self.light.y = 2 * ((action.y - 320) / 320)
	model.set_constant("/objs#cube", "light", self.light)
	model.set_constant("/objs#quad", "light", self.light)

	model.set_constant("/sky#sphere", "sunposition", vmath.vector4(500.0, 500.0, 400.000, 1.0))

	self.camerapos = go.get_position("/camera")
	model.set_constant("/sky#sphere", "cameraPos", vmath.vector4(self.camerapos.x,self.camerapos.y,self.camerapos.z, 0.0))
end

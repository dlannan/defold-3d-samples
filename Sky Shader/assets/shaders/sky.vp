

uniform mediump vec4 sunposition;
//uniform float rayleigh;
//uniform float turbidity;
//uniform float mieCoefficient;
uniform  mediump vec4 vparams;
uniform  mediump mat4 mtx_worldview;
uniform  mediump mat4 mtx_proj;

// positions are in world space
attribute  mediump vec4 position;

varying  highp  vec3 vWorldPosition;
varying  highp  vec3 vSunDirection;
varying  highp  float vSunfade;
varying  highp  vec3 vBetaR;
varying  highp  vec3 vBetaM;
varying  highp  float vSunE;

const  vec3 up = vec3( 0.0, 1.0, 0.0 );

// constants for atmospheric scattering
const highp float e = 2.71828182845904523536028747135266249775724709369995957;
const highp float pi = 3.141592653589793238462643383279502884197169;

// wavelength of used primaries, according to preetham
const highp vec3 lambda = highp vec3( 680E-9, 550E-9, 450E-9 );
// this pre-calcuation replaces older TotalRayleigh(vec3 lambda) function:
// (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn))
const highp vec3 totalRayleigh = highp vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );

// mie stuff
// K coefficient for the primaries
const highp float v = 4.0;
const highp vec3 K = highp vec3( 0.686, 0.678, 0.666 );
// MieConst = pi * pow( ( 2.0 * pi ) / lambda, vec3( v - 2.0 ) ) * K
const highp vec3 MieConst = highp vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );

// earth shadow hack
// cutoffAngle = pi / 1.95;
const highp float cutoffAngle = 1.6110731556870734;
const highp float steepness = 1.5;
const highp float EE = 1000.0;

highp float sunIntensity( highp float zenithAngleCos ) {
	zenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );
	return EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );
}

highp vec3 totalMie( highp float T ) {
	highp float c = ( 0.2 * T ) * 10E-18;
	return 0.434 * c * MieConst;
}

void main() {

	highp vec4 worldPosition = mtx_worldview * highp vec4(position.xyz, 1.0);
	vWorldPosition = worldPosition.xyz;

	gl_Position = mtx_proj * worldPosition;
			
	vSunDirection = normalize( sunposition.xyz );
	vSunE = sunIntensity( dot( vSunDirection, up ) );
	vSunfade = 0.75 * min(1.0, max(0.0, (0.03125 + sunposition.y) / 0.0625));
	vSunfade = 1.0 - clamp( 1.0 - exp( ( sunposition.y / 2500.0 ) ), 0.0, 1.0 );

	highp float rayleighCoefficient = vparams.x - ( 1.0 * ( 1.0 - vSunfade ) );

	// extinction (absorbtion + out scattering)
	// rayleigh coefficients
	vBetaR = totalRayleigh * rayleighCoefficient;

	// mie coefficients
	vBetaM = totalMie( vparams.y ) * vparams.z;
}
